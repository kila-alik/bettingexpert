<?php

namespace Bett\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class ForecastsRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    protected function getValidatorInstance()
    {
        $validator = parent::getValidatorInstance();

        $validator->sometimes(['express.sort_id.*'], ['required','exists:sorts,id'], function($input)
        {
            return $input->sort_ord == 1;
        });

        $validator->sometimes(['express.date.*'], ['required','date_format:Y-m-d H:i:s'], function($input){
            return $input->sort_ord == 1;
        });

        $validator->sometimes(['sort_id','game', 'match'], 'required', function($input)
        {
            return $input->sort_ord == 0;
        });

        $validator->sometimes('coeff', 'required|numeric', function($input)
        {
            return $input->sort_ord == 0;
        });

        $validator->sometimes(['date'], ['required','date_format:Y-m-d H:i:s'], function($input)
        {
            return $input->sort_ord == 0;
        });

        $validator->sometimes(['price'], 'required', function($input){
           return $input->paid == 0;
        });

        return $validator; // TODO: Change the autogenerated stub
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            'description' => 'required',
            'title' => 'required',
            'meta_keywords' => 'required',
            'meta_description' => 'required',
            'forecaster_id' => 'required|exists:users,id'
        ];
    }
}
